{"info":{"_postman_id":"193f5562-f2a1-43c0-921b-9057c5c7450e","name":"Blog Posts","description":"This is the collection for all interactions with blog posts. The sections under this collection include creation, modification, view, and report, where reports represents inappropriate content report rather than a data analysis report.","schema":"https://schema.getpostman.com/json/collection/v2.1.0/collection.json"},"item":[{"name":"Creation","item":[{"name":"Create blog post tag","id":"c3d46045-90bc-4070-846c-d97f9212adf2","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"POST","header":[],"body":{"mode":"raw","raw":"{\r\n    \"tag\": \"make_sure_this_is_an_unique_tag!\"\r\n}","options":{"raw":{"language":"json"}}},"url":{"raw":"http://localhost:3000/api/blogPost/createTags","protocol":"http","host":["localhost"],"port":"3000","path":["api","blogPost","createTags"]},"description":"## Create Tags for Blog Post\n\n`POST /api/blogPost/createTags`\n\nThis endpoint allows the creation of tags for a blog post.\n\n### Request Body\n\n- `tag`: (string, required) The tag to be created.\n    \n\n### Example Response\n\n``` json\n{\n    \"id\": 5,\n    \"tag\": \"make_sure_this_is_an_unique_tag!\"\n}\n\n ```"},"response":[]},{"name":"Create blog post","event":[{"listen":"prerequest","script":{"id":"3379d9ed-aea6-4d96-886e-5a44820f20a5","exec":["// Check if accessToken exists in environment variables\r","if (pm.environment.get(\"accessToken\")) {\r","    // Set the Authorization header to use Bearer token from accessToken variable\r","    pm.request.headers.add({\r","        key: \"Authorization\",\r","        value: `Bearer ${pm.environment.get(\"accessToken\")}`\r","    });\r","}\r","\r","// Check if refreshToken exists in environment variables\r","if (pm.environment.get(\"refreshToken\")) {\r","    // Set the Refresh-Token header to use the refreshToken variable\r","    pm.request.headers.add({\r","        key: \"Refresh-Token\",\r","        value: pm.environment.get(\"refreshToken\")\r","    });\r","}"],"type":"text/javascript","packages":{}}}],"id":"f7a44295-5209-4d7f-b348-977905a2712f","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"POST","header":[],"body":{"mode":"raw","raw":"{\r\n    \"title\":\"post1!\",\r\n    \"description\":\"This is my first post!\",\r\n    \"body\":\"testing out the blog post feature!\",\r\n    \"tags\": [\"educational\"]\r\n}","options":{"raw":{"language":"json"}}},"url":{"raw":"http://localhost:3000/api/blogPost/create","protocol":"http","host":["localhost"],"port":"3000","path":["api","blogPost","create"]},"description":"### Create Blog Post\n\n`POST api/blogPost/create`\n\nThis endpoint allows an authenticated user to create a new blog post.\n\n### Request Body\n\n- `title` (string, required): The title of the blog post.\n    \n- `description` (string, required): A brief description of the blog post.\n    \n- `body` (string, required): The main content of the blog post.\n    \n- `tags` (array of strings, optional): An array of tags associated with the blog post.\n    \n\n### Headers\n\n- `Authorization` (string, required): Bearer token for access authorization\n    \n- `Refresh-Token` (string, rquried): refresh token for access authorization\n    \n\n### Example Response\n\n``` json\n{\n    \"postId\": 1,\n    \"userId\": 1,\n    \"title\": \"post1!\",\n    \"description\": \"This is my first post!\",\n    \"body\": \"testing out the blog post feature!\",\n    \"netvote\": 0,\n    \"isHidden\": false,\n    \"isDeleted\": false,\n    \"createdAt\": \"2024-11-04T22:21:24.169Z\"\n}\n\n ```"},"response":[]}],"id":"e0fe9fc7-64c3-4161-ac67-993722d6f973","description":"This folder includes the endpoint for creating blog post tags as well as creating blog posts; the create blog post tag endpoint is used by us to initialilize tags since blog posts can only select tags that are from our tag bank."},{"name":"Modification","item":[{"name":"Edit blog post","event":[{"listen":"prerequest","script":{"id":"4d2adcc1-f836-4f07-aa93-1ce6ccbf1cec","exec":["// Check if accessToken exists in environment variables\r","if (pm.environment.get(\"accessToken\")) {\r","    // Set the Authorization header to use Bearer token from accessToken variable\r","    pm.request.headers.add({\r","        key: \"Authorization\",\r","        value: `Bearer ${pm.environment.get(\"accessToken\")}`\r","    });\r","}\r","\r","// Check if refreshToken exists in environment variables\r","if (pm.environment.get(\"refreshToken\")) {\r","    // Set the Refresh-Token header to use the refreshToken variable\r","    pm.request.headers.add({\r","        key: \"Refresh-Token\",\r","        value: pm.environment.get(\"refreshToken\")\r","    });\r","}"],"type":"text/javascript","packages":{}}}],"id":"7994889b-7911-44e9-8846-829787c26107","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"PUT","header":[],"body":{"mode":"raw","raw":"{\r\n    \"title\":\"this is an edited post!\",\r\n    \"description\":\"testing the edit blog post feature!\",\r\n    \"body\":\"the content you see here are edited!\"\r\n}","options":{"raw":{"language":"json"}}},"url":{"raw":"http://localhost:3000/api/blogPost/edit?blogPostId=1","protocol":"http","host":["localhost"],"port":"3000","path":["api","blogPost","edit"],"query":[{"key":"blogPostId","value":"1"}]},"description":"## Edit Blog Post\n\n`PUT /api/blogPost/edit`\n\nThis endpoint allows an authenticated user to edit their existing blog post.\n\n### Request Body\n\n- `title` (string, optional): The updated title of the blog post.\n    \n- `description` (string, optional): The updated description of the blog post.\n    \n- `body` (string, optional): The updated content/body of the blog post.\n    \n\n### Headers\n\n- `Authorization` (string, required): Bearer token for access authorization\n    \n- `Refresh-Token` (string, required): Refresh token for access authorization\n    \n\n### Example Response\n\n``` json\n{\n    \"postId\": 1,\n    \"userId\": 1,\n    \"title\": \"this is an edited post!\",\n    \"description\": \"testing the edit blog post feature!\",\n    \"body\": \"the content you see here are edited!\",\n    \"netvote\": 0,\n    \"isHidden\": false,\n    \"isDeleted\": false,\n    \"createdAt\": \"2024-11-04T22:21:24.169Z\"\n}\n\n ```"},"response":[]},{"name":"Delete blog post (toggle isDeleted = true)","event":[{"listen":"prerequest","script":{"id":"9ffdc87e-becf-4593-a618-3b6d0bdcd4bd","exec":["// Check if accessToken exists in environment variables\r","if (pm.environment.get(\"accessToken\")) {\r","    // Set the Authorization header to use Bearer token from accessToken variable\r","    pm.request.headers.add({\r","        key: \"Authorization\",\r","        value: `Bearer ${pm.environment.get(\"accessToken\")}`\r","    });\r","}\r","\r","// Check if refreshToken exists in environment variables\r","if (pm.environment.get(\"refreshToken\")) {\r","    // Set the Refresh-Token header to use the refreshToken variable\r","    pm.request.headers.add({\r","        key: \"Refresh-Token\",\r","        value: pm.environment.get(\"refreshToken\")\r","    });\r","}"],"type":"text/javascript","packages":{}}}],"id":"bff0dcd9-b4e5-4071-a409-8cee3a492815","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"DELETE","header":[],"body":{"mode":"raw","raw":"","options":{"raw":{"language":"json"}}},"url":{"raw":"http://localhost:3000/api/blogPost/delete?blogPostId=1","protocol":"http","host":["localhost"],"port":"3000","path":["api","blogPost","delete"],"query":[{"key":"blogPostId","value":"1"}]},"description":"## Delete blog post\n\n`DELTE /api/blogPost/delete`\n\nThis endpoint allows an authenticated user to delete their own blog post with the given blogPostId query parameter in the URL.\n\n### Request Query Params\n\n- blogPostId (required): ID of blog post to be deleted\n    \n\n### Request Body\n\nThis request does not contain a request body.\n\n### Headers\n\n- `Authorization` (string, required): Bearer token for access authorization\n    \n- `Refresh-Token` (string, required): Refresh token for access authorization\n    \n\n### Example Response\n\nThis endpoint doesn't delete a blog post entirely from the database, but set the requested blog post's `isDeleted` to true.\n\n``` json\n{\n    \"postId\": 1,\n    \"userId\": 1,\n    \"title\": \"this is an edited post!\",\n    \"description\": \"testing the edit blog post feature!\",\n    \"body\": \"the content you see here are edited!\",\n    \"netvote\": 0,\n    \"isHidden\": false,\n    \"isDeleted\": true,\n    \"createdAt\": \"2024-11-04T22:21:24.169Z\"\n}\n\n ```"},"response":[]},{"name":"Vote on blog post","event":[{"listen":"prerequest","script":{"id":"5cc6ebba-d8fb-4c29-a011-07e86ca88daf","exec":["// Check if accessToken exists in environment variables\r","if (pm.environment.get(\"accessToken\")) {\r","    // Set the Authorization header to use Bearer token from accessToken variable\r","    pm.request.headers.add({\r","        key: \"Authorization\",\r","        value: `Bearer ${pm.environment.get(\"accessToken\")}`\r","    });\r","}\r","\r","// Check if refreshToken exists in environment variables\r","if (pm.environment.get(\"refreshToken\")) {\r","    // Set the Refresh-Token header to use the refreshToken variable\r","    pm.request.headers.add({\r","        key: \"Refresh-Token\",\r","        value: pm.environment.get(\"refreshToken\")\r","    });\r","}"],"type":"text/javascript","packages":{}}}],"id":"0d94a316-a4fc-4dab-99bf-6ff43384eaa7","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"POST","header":[],"body":{"mode":"raw","raw":"{\r\n    \"voteType\":\"upvote\"\r\n}","options":{"raw":{"language":"json"}}},"url":{"raw":"http://localhost:3000/api/blogPost/vote?blogPostId=3","protocol":"http","host":["localhost"],"port":"3000","path":["api","blogPost","vote"],"query":[{"key":"blogPostId","value":"3"}]},"description":"## Vote on Blog Post\n\n`PUT /api/blogPost/vote`\n\nThis endpoint allows an authenticated user to upvote a blog post.\n\n### Request Body\n\n- `voteType` (string, required): The type of vote that the user wants to select; either upvote or downvote.\n    \n\n### Headers\n\n- `Authorization` (string, required): Bearer token for access authorization\n    \n- `Refresh-Token` (string, required): Refresh token for access authorization\n    \n\n### Example Response\n\n``` json\n{\n    \"message\": \"Vote registered successfully\"\n}\n\n ```"},"response":[]}],"id":"f32c7582-87f8-4ae3-afd1-54eb48d08001","description":"This folder includes the endpoints to edit, delete, and vote on a blog post. Note that delete simply toggles an \"isDeleted\" field and does not permanently remove anything from your database."},{"name":"View","item":[{"name":"Default view of all posts","id":"8c409190-432e-4322-adb5-54de02a6ca65","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"GET","header":[],"body":{"mode":"raw","raw":"","options":{"raw":{"language":"json"}}},"url":{"raw":"http://localhost:3000/api/blogPost/?page=1","protocol":"http","host":["localhost"],"port":"3000","path":["api","blogPost",""],"query":[{"key":"page","value":"1"}]},"description":"## Get All Blog Posts\n\n`GET /api/blogPost/`\n\nThis endpoint allows any users to retrieve a paginated list of blog posts that are not hidden or deleted.\n\n### Request Body\n\n- `page` (number, optional): The page number to retrieve. Defaults to 1\n    \n- `limit` (number, optional): The number of blog posts per page. Defaults to 10.\n    \n\n### Example Response\n\n- `data` (array): An array of blog post objects.\n    \n- `totalPosts` (number): The total number of posts available.\n    \n- `totalPages` (number): The total number of pages based on the available posts.\n    \n- `currentPage` (number): The current page number.\n    \n\n``` json\n{\n    \"data\": [\n        {\n            \"postId\": 2,\n            \"userId\": 1,\n            \"title\": \"post2!\",\n            \"description\": \"This is my first post!\",\n            \"body\": \"testing out the blog post feature!\",\n            \"netvote\": 0,\n            \"isHidden\": false,\n            \"isDeleted\": false,\n            \"createdAt\": \"2024-11-04T22:34:38.761Z\"\n        }\n    ],\n    \"totalPosts\": 1,\n    \"totalPages\": 1,\n    \"currentPage\": 1\n}\n\n ```"},"response":[]},{"name":"Seach blog posts based on optional criterion","id":"300148a9-e5e0-4b39-9048-615ed7a843d3","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"GET","header":[],"body":{"mode":"raw","raw":"{\r\n    \"searchTitle\": \"1\"\r\n}","options":{"raw":{"language":"json"}}},"url":{"raw":"http://localhost:3000/api/blogPost/search","protocol":"http","host":["localhost"],"port":"3000","path":["api","blogPost","search"]},"description":"## Search blog posts\n\n`GET /api/blogPost/search`\n\nThis endpoint allows any user to search for blog posts.\n\n#### Request Body\n\n- `searchTitle` (text, required): The title to search for in the blog posts.\n    \n- `searchDescription` (string, optional): A substring to search for in the blog post descriptions.\n    \n- `searchTags` (array of strings, optional): An array of tags to filter the blog posts.\n    \n- `wantCodeTemplates` (boolean, optional): A flag to indicate if only posts with code templates should be retrieved.\n    \n- `searchCodeTemplateTitle` (string, optional): A substring to search for in the titles of associated code templates\n    \n- `page` (number, optional): The page number for pagination. Defaults to 1.\n    \n- `pageSize` (number, optional): The number of blog posts to return per page. Defaults to 10.\n    \n\n### Example Response\n\n- `data` (array): An array of blog post data matching the search criteria.\n    \n- `currentPage` (number): The current page number of the results.\n    \n- `totalPages` (number): The total number of pages available.\n    \n- `totalItems` (number): The total number of blog posts found.\n    \n\n``` json\n{\n    \"data\": [\n        {\n            \"postId\": 2,\n            \"userId\": 1,\n            \"title\": \"post1!\",\n            \"description\": \"This is my first post!\",\n            \"body\": \"testing out the blog post feature!\",\n            \"netvote\": 0,\n            \"isHidden\": false,\n            \"isDeleted\": false,\n            \"createdAt\": \"2024-11-04T22:34:38.761Z\"\n        }\n    ],\n    \"currentPage\": 1,\n    \"totalPages\": 1,\n    \"totalItems\": 1\n}\n\n ```"},"response":[]},{"name":"Sort blog posts by rating","id":"c4152790-e99d-4e4a-8da6-67a3c502f639","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"GET","header":[],"body":{"mode":"raw","raw":"{\r\n    \"sortBy\":\"desc\",\r\n    \"blogPostIds\":\"2,3\"\r\n}","options":{"raw":{"language":"json"}}},"url":{"raw":"http://localhost:3000/api/blogPost/sortRating","protocol":"http","host":["localhost"],"port":"3000","path":["api","blogPost","sortRating"]},"description":"## Get Sorted Blog Posts by Rating\n\n`GET /api/blogPost/sortRating`\n\nThis endpoint retrieves blog posts sorted by rating in a specified order.\n\n### Request Body\n\n- `sortBy` (string, required): The sorting order for the blog posts. Accepted values are `asc`for ascending and `desc` for descending.\n    \n- `blogPostIds` (string, required): Comma-separated list of blog post IDs to be sorted.\n    \n\n### Example Response\n\n- `blogPosts` (array): Contains the sorted blog posts.\n    \n- `pagination` (object): Contains details about the pagination.\n    \n\n``` json\n{\n    \"blogPosts\": [\n        {\n            \"postId\": 3,\n            \"userId\": 1,\n            \"title\": \"post2!\",\n            \"description\": \"This is my second post!\",\n            \"body\": \"using this blog post for real!\",\n            \"netvote\": 1,\n            \"isHidden\": false,\n            \"isDeleted\": false,\n            \"createdAt\": \"2024-11-04T22:46:37.901Z\"\n        },\n        {\n            \"postId\": 2,\n            \"userId\": 1,\n            \"title\": \"post1!\",\n            \"description\": \"This is my first post!\",\n            \"body\": \"testing out the blog post feature!\",\n            \"netvote\": 0,\n            \"isHidden\": false,\n            \"isDeleted\": false,\n            \"createdAt\": \"2024-11-04T22:34:38.761Z\"\n        }\n    ],\n    \"pagination\": {\n        \"totalPosts\": 2,\n        \"totalPages\": 1,\n        \"currentPage\": 1,\n        \"pageSize\": 10\n    }\n}\n\n ```"},"response":[]},{"name":"View specific blog post","id":"9889b8a3-8c53-47e9-bf3c-52de6a62ab89","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"GET","header":[],"url":{"raw":"http://localhost:3000/api/blogPost/3","protocol":"http","host":["localhost"],"port":"3000","path":["api","blogPost","3"]},"description":"## View specific blog post\n\n`GET /api/blogPost/[id]`\n\nThe endpoint allows any user to retrieve a blog post with the specified ID in the URL params.\n\n### Example Response\n\n``` json\n{\n    \"postId\": 3,\n    \"userId\": 1,\n    \"title\": \"post2!\",\n    \"description\": \"This is my second post!\",\n    \"body\": \"using this blog post for real!\",\n    \"netvote\": 1,\n    \"isHidden\": false,\n    \"isDeleted\": false,\n    \"createdAt\": \"2024-11-04T22:46:37.901Z\"\n}\n\n ```"},"response":[]},{"name":"Get comments on a specific blog post","id":"35e73ed9-43ac-4bb9-b3a7-94b96edbb148","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"GET","header":[],"body":{"mode":"raw","raw":"","options":{"raw":{"language":"json"}}},"url":{"raw":"http://localhost:3000/api/blogPost/getComments?blogPostId=1","protocol":"http","host":["localhost"],"port":"3000","path":["api","blogPost","getComments"],"query":[{"key":"blogPostId","value":"1"}]},"description":"## Get blog post comments\n\n`GET /api/blogPost/getComments`\n\nThis endpoint retrieves comments for a specific blog post.\n\n### Query Params\n\n- `blogPostId` (integer, required): The ID of the blog post for which comments are to be retrieved.\n    \n\n### Example Responses\n\nFor this endpoint there is a possibility of 2 responses:\n\n- If there are no messages:\n    \n\n``` json\n{\n    \"message\": \"No comments to be found\"\n}\n\n ```\n\n- If there are one or more messages:\n    \n\n``` json\n[\n    {\n        \"commentId\": 1,\n        \"userId\": 1,\n        \"body\": \"that is so interesting!\",\n        \"parentId\": null,\n        \"blogPostId\": 2,\n        \"depth\": 0,\n        \"isHidden\": false,\n        \"isDeleted\": false,\n        \"createdAt\": \"2024-11-04T22:56:38.438Z\"\n    },\n    {\n        \"commentId\": 2,\n        \"userId\": 1,\n        \"body\": \"i am a child\",\n        \"parentId\": 1,\n        \"blogPostId\": 2,\n        \"depth\": 1,\n        \"isHidden\": false,\n        \"isDeleted\": false,\n        \"createdAt\": \"2024-11-04T22:59:48.511Z\"\n    }\n]\n\n ```"},"response":[]}],"id":"d38455bd-6728-4c86-ba68-de11847c8c74","description":"This folder contains endpoints that are meant to view blog posts, which includes default views, sorting, searching, looking up specific blog posts, or finding the comments of a blog post."},{"name":"Report","item":[{"name":"Create a new report","event":[{"listen":"prerequest","script":{"id":"f16cc394-4ee5-40d9-8eab-f1722195b0ad","exec":["// Check if accessToken exists in environment variables","if (pm.environment.get(\"accessToken\")) {","    // Set the Authorization header to use Bearer token from accessToken variable","    pm.request.headers.add({","        key: \"Authorization\",","        value: `Bearer ${pm.environment.get(\"accessToken\")}`","    });","}","","// Check if refreshToken exists in environment variables","if (pm.environment.get(\"refreshToken\")) {","    // Set the Refresh-Token header to use the refreshToken variable","    pm.request.headers.add({","        key: \"Refresh-Token\",","        value: pm.environment.get(\"refreshToken\")","    });","}"],"type":"text/javascript","packages":{}}}],"id":"0ee5b0d5-e19f-41b5-9641-4c1a237c58d6","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"POST","header":[],"body":{"mode":"raw","raw":"{\n    \"blogPostId\": 1,\n    \"body\": \"inappropriate\",\n    \"contentType\": \"blog post\"\n}","options":{"raw":{"language":"json"}}},"url":{"raw":"http://localhost:3000/api/blogPost/report","protocol":"http","host":["localhost"],"port":"3000","path":["api","blogPost","report"]},"description":"## Report blog post\n\n`POST /api/blogPost/report`\n\nThis endpoint allows users to report a blog post.\n\n### Request Body\n\n- `blogPostId` (Number): The ID of the blog post being reported.\n    \n- `body` (String): The reason for reporting the blog post.\n    \n- `contentType` (String): The type of content being reported (e.g., \"blog post\").\n    \n\n### Headers\n\n- `Authorization` (string, required): Bearer token for access authorization\n    \n- `Refresh-Token` (string, required): Refresh token for access authorization\n    \n\n### Example Response\n\n``` json\n{\n    \"reportId\": 3,\n    \"userId\": 1,\n    \"body\": \"inappropriate\",\n    \"isResolved\": false,\n    \"contentType\": \"blog post\",\n    \"createdAt\": \"2024-11-04T23:51:58.333Z\",\n    \"blogPostId\": 1,\n    \"commentId\": null,\n    \"codeTemplateId\": null\n}\n\n ```"},"response":[]},{"name":"(ADMIN) Search reports","event":[{"listen":"prerequest","script":{"id":"1ee542b4-3106-4de1-bf11-c198ac8f0152","exec":["// Check if accessToken exists in environment variables","if (pm.environment.get(\"accessToken\")) {","    // Set the Authorization header to use Bearer token from accessToken variable","    pm.request.headers.add({","        key: \"Authorization\",","        value: `Bearer ${pm.environment.get(\"accessToken\")}`","    });","}","","// Check if refreshToken exists in environment variables","if (pm.environment.get(\"refreshToken\")) {","    // Set the Refresh-Token header to use the refreshToken variable","    pm.request.headers.add({","        key: \"Refresh-Token\",","        value: pm.environment.get(\"refreshToken\")","    });","}"],"type":"text/javascript","packages":{}}}],"id":"76cc22e6-4bfc-4e9c-860c-74e38d12c53b","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"GET","header":[],"body":{"mode":"raw","raw":"","options":{"raw":{"language":"json"}}},"url":{"raw":"http://localhost:3000/api/blogPost/admin/searchReports","protocol":"http","host":["localhost"],"port":"3000","path":["api","blogPost","admin","searchReports"]},"description":"## Search blog posts reports\n\n`GET /api/blogPost/admin/searchReports`\n\nThis endpoint retrieves a list of reports related to blog posts for admin users.\n\n## Request Body\n\n- `searchBlogPostId` (number, optional): Filters reports by a specific blog post ID.\n    \n- `searchUserId` (number, optional): Filters reports by a specific user ID.\n    \n- `searchUnresolved` (Boolean, optional): If true, only unresolved reports are fetched. Defaults to false.\n    \n- `page` (number, optional): Pagination page. Defaults to 1.\n    \n- `pageSize` (number, optional): Number of reports per page. Defaults to 10.\n    \n\n### Headers\n\n- `Authorization` (string, required): Bearer token for access authorization\n    \n- `Refresh-Token` (string, required): Refresh token for access authorization\n    \n\n## Example Response\n\n``` json\n[\n    {\n        \"reportId\": 3,\n        \"userId\": 1,\n        \"body\": \"inappropriate\",\n        \"isResolved\": false,\n        \"contentType\": \"blog post\",\n        \"createdAt\": \"2024-11-04T23:51:58.333Z\",\n        \"blogPostId\": 1,\n        \"commentId\": null,\n        \"codeTemplateId\": null\n    },\n    {\n        \"reportId\": 4,\n        \"userId\": 3,\n        \"body\": \"ew\",\n        \"isResolved\": false,\n        \"contentType\": \"blog post\",\n        \"createdAt\": \"2024-11-04T23:54:03.561Z\",\n        \"blogPostId\": 1,\n        \"commentId\": null,\n        \"codeTemplateId\": null\n    }\n]\n\n ```"},"response":[]},{"name":"(ADMIN) Resolve a report for a blog post","event":[{"listen":"prerequest","script":{"id":"8c90a1d9-7cc0-4e2e-99db-b4de643a4f32","exec":["// Check if accessToken exists in environment variables","if (pm.environment.get(\"accessToken\")) {","    // Set the Authorization header to use Bearer token from accessToken variable","    pm.request.headers.add({","        key: \"Authorization\",","        value: `Bearer ${pm.environment.get(\"accessToken\")}`","    });","}","","// Check if refreshToken exists in environment variables","if (pm.environment.get(\"refreshToken\")) {","    // Set the Refresh-Token header to use the refreshToken variable","    pm.request.headers.add({","        key: \"Refresh-Token\",","        value: pm.environment.get(\"refreshToken\")","    });","}"],"type":"text/javascript","packages":{}}}],"id":"6291db26-6a44-43e7-b632-3e596e77ed8f","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"POST","header":[],"body":{"mode":"raw","raw":"{\n    \"blogPostId\": 1,\n    \"reportId\": 3\n}","options":{"raw":{"language":"json"}}},"url":{"raw":"http://localhost:3000/api/blogPost/admin/resolveReports","protocol":"http","host":["localhost"],"port":"3000","path":["api","blogPost","admin","resolveReports"]},"description":"## Resolve Reports for Blog Post\n\n`POST /api/blogPost/admin/resolveReports`\n\nThis endpoint allows an admin to resolve reports for a specific blog post.\n\n#### Request Body\n\n- `blogPostId` (number): The ID of the blog post for which reports are being resolved.\n    \n- `reportId` (number): The ID of the report being resolved.\n    \n\n### Headers\n\n- `Authorization` (string, required): Bearer token for access authorization\n    \n- `Refresh-Token` (string, required): Refresh token for access authorization\n    \n\n### Example Response\n\n``` json\n{\n    \"reportId\": 3,\n    \"userId\": 1,\n    \"body\": \"inappropriate\",\n    \"isResolved\": true,\n    \"contentType\": \"blog post\",\n    \"createdAt\": \"2024-11-04T23:51:58.333Z\",\n    \"blogPostId\": 1,\n    \"commentId\": null,\n    \"codeTemplateId\": null\n}\n\n ```"},"response":[]},{"name":"(ADMIN) Hide a blog post","event":[{"listen":"prerequest","script":{"id":"7aee214b-dcc1-432e-ad69-900064d8a8ff","exec":["// Check if accessToken exists in environment variables","if (pm.environment.get(\"accessToken\")) {","    // Set the Authorization header to use Bearer token from accessToken variable","    pm.request.headers.add({","        key: \"Authorization\",","        value: `Bearer ${pm.environment.get(\"accessToken\")}`","    });","}","","// Check if refreshToken exists in environment variables","if (pm.environment.get(\"refreshToken\")) {","    // Set the Refresh-Token header to use the refreshToken variable","    pm.request.headers.add({","        key: \"Refresh-Token\",","        value: pm.environment.get(\"refreshToken\")","    });","}"],"type":"text/javascript","packages":{}}}],"id":"a9ecfdb6-116d-43f6-a7ff-f4071ca2e43f","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"POST","header":[],"body":{"mode":"raw","raw":"{\n    \"blogPostId\": 1,\n    \"wantHidden\": true\n}","options":{"raw":{"language":"json"}}},"url":{"raw":"http://localhost:3000/api/blogPost/admin/hide","protocol":"http","host":["localhost"],"port":"3000","path":["api","blogPost","admin","hide"]},"description":"## Hide Blog Post\n\n`POST /api/blogPost/admin/hide`\n\nThis API endpoint is used to hide a blog post by the admin.\n\n#### Request Body\n\n- `blogPostId` (number, required) - The ID of the blog post to be hidden.\n    \n- `wantHidden` (boolean, required) - True to hide, false to unhide.\n    \n\n### Headers\n\n- `Authorization` (string, required): Bearer token for access authorization\n    \n- `Refresh-Token` (string, required): Refresh token for access authorization\n    \n\n### Example Response\n\n``` json\n{\n    \"postId\": 1,\n    \"userId\": 1,\n    \"title\": \"this is an edited post!\",\n    \"description\": \"testing the edit blog post feature!\",\n    \"body\": \"the content you see here are edited!\",\n    \"netvote\": 0,\n    \"isHidden\": true,\n    \"isDeleted\": true,\n    \"createdAt\": \"2024-11-04T22:21:24.169Z\"\n}\n\n ```"},"response":[]}],"id":"66c6b0fd-aecf-4a8a-8b37-2334c9695146","description":"This folder includes the ICR section of blog posts, which includes both creating a new report as well as endpoints for an admin to search for reports, resolve a report, or hide a blog post."}]}